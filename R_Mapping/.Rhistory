leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, weight = ~Confirmed, color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(~ifelse(Confirmed == 0, 0, 10), color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0, 10), color = 'red')
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, opacity = ~ifelse(Confirmed == 0, 1, .5), color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, opacity = 1, color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, opacity = 0, color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red')
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = False)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow') %>%
addCircleMarkers(radius = ~Confirmed, opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow') %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('ncov_mapping.R')
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = ~htmlEscape(Location)) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = ~Location) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = ~Location + ~Suspected) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = ~Location + toString(~Suspected)) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = (~Location + toString(~Suspected))) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = toString(~Suspected)) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('ncov_mapping.R')
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = ~Suspected) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('ncov_mapping.R')
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,1 ), color = 'yellow', label = ~Location) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,100 ), color = 'orange', label = ~ifelse(Location, Location,'' )) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected, opacity = ~ifelse(Suspected == 0, 0,100 ), color = 'orange', label = ~Location) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('ncov_mapping.R')
# Define UI for app that draws a histogram ----
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("DatesMerge",
"Dates:",
animate = TRUE,
min = as.Date(min(df$Date),"%Y-%m-%d"),
max = as.Date(max(df$Date),"%Y-%m-%d"),
value=as.Date(max(df$Date)),
timeFormat="%Y-%m-%d")
,
checkboxInput("legend", "Show legend", TRUE)
)
)
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
df <- read.csv(file = 'ncov_parsed.csv')
df$Date <- as.Date(as.POSIXct(df$Date,format="%Y-%m-%dT%H:%M:%OS"))
str(df)
# Define UI for app that draws a histogram ----
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
titlePanel("COVID-19 Tracker Ph"),
sliderInput("DatesMerge",
"Dates:",
animate = TRUE,
min = as.Date(min(df$Date),"%Y-%m-%d"),
max = as.Date(max(df$Date),"%Y-%m-%d"),
value=as.Date(max(df$Date)),
timeFormat="%Y-%m-%d")
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output,session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df[df$Date == input$DatesMerge,]
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(df) %>% addTiles() %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude))
})
observe({
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircleMarkers(radius = ~Suspected - 70, opacity = ~ifelse(Suspected == 0, 0,100 ), color = 'yellow', label = ~Location) %>%
addCircleMarkers(radius = ~ifelse(Confirmed == 0, 0,10), opacity = ~ifelse(Confirmed == 0, 0,1 ), color = 'red', stroke = FALSE)
})
}
shinyApp(ui = ui, server = server)
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
runApp('ncov_mapping.R')
